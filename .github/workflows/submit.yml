concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}
jobs:
  artifacts:
    continue-on-error: true
    if: always()
    name: Post-process artifacts
    needs:
    - prerequisites
    - linux_additional_build
    - linux_x64_test
    - linux_x86_test
    - windows_x64_test
    - windows_x86_test
    - macos_x64_test
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: actions_runtime
      name: Determine current artifacts endpoint
      uses: actions/github-script@v6
      with:
        script: 'return { url: process.env[''ACTIONS_RUNTIME_URL''], token: process.env[''ACTIONS_RUNTIME_TOKEN'']
          }'
    - continue-on-error: true
      name: Display current artifacts
      run: 'curl -s -H ''Accept: application/json;api-version=6.0-preview'' -H ''Authorization:
        Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'' ''${{
        fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{
        github.run_id }}/artifacts?api-version=6.0-preview''

        '
    - continue-on-error: true
      name: Delete transient artifacts
      run: 'for url in ` curl -s -H ''Accept: application/json;api-version=6.0-preview''
        -H ''Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token
        }}'' ''${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{
        github.run_id }}/artifacts?api-version=6.0-preview'' | jq -r -c ''.value |
        map(select(.name|startswith("transient_"))) | .[].url''`; do curl -s -H ''Accept:
        application/json;api-version=6.0-preview'' -H ''Authorization: Bearer ${{
        fromJson(steps.actions_runtime.outputs.result).token }}'' -X DELETE "${url}";
        done

        '
    - continue-on-error: true
      name: Fetch remaining artifacts (test results)
      uses: actions/download-artifact@v3
      with:
        path: test-results
    - continue-on-error: true
      name: Delete remaining artifacts
      run: 'for url in ` curl -s -H ''Accept: application/json;api-version=6.0-preview''
        -H ''Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token
        }}'' ''${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis/pipelines/workflows/${{
        github.run_id }}/artifacts?api-version=6.0-preview'' | jq -r -c ''.value |
        .[].url''`; do curl -s -H ''Accept: application/json;api-version=6.0-preview''
        -H ''Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token
        }}'' -X DELETE "${url}"; done

        '
    - continue-on-error: true
      name: Upload a combined test results artifact
      uses: actions/upload-artifact@v3
      with:
        name: test-results_${{ needs.prerequisites.outputs.bundle_id }}
        path: test-results
  linux_additional_build:
    env:
      BOOT_JDK: /usr/lib/jvm/java-8-openjdk-amd64
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_additional
      != 'false'
    name: Linux additional
    needs:
    - prerequisites
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
      with:
        path: jdk
    - continue-on-error: true
      name: Update apt
      run: sudo apt-get update
    - continue-on-error: true
      if: matrix.debian-arch == ''
      name: Install native host dependencies
      run: 'sudo apt-get install openjdk-8-jdk gcc-9 g++-9 libxrandr-dev libxtst-dev
        libcups2-dev libasound2-dev

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave
        /usr/bin/g++ g++ /usr/bin/g++-9

        '
    - continue-on-error: true
      if: matrix.multilib != ''
      name: Install multilib dependencies
      run: 'sudo dpkg --add-architecture i386

        sudo apt-get update

        sudo apt-get install --only-upgrade apt

        sudo apt-get install openjdk-8-jdk gcc-9-multilib g++-9-multilib libfreetype6-dev:i386
        libxrandr-dev:i386 libxtst-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386
        libcups2-dev:i386 libasound2-dev:i386

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave
        /usr/bin/g++ g++ /usr/bin/g++-9

        '
    - continue-on-error: true
      if: matrix.debian-arch != ''
      name: Install cross-compilation host dependencies
      run: sudo apt-get install openjdk-8-jdk gcc-9-${{ matrix.gnu-arch }}-linux-gnu${{
        matrix.gnu-flavor}} g++-9-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}
    - continue-on-error: true
      id: cache-sysroot
      if: matrix.debian-arch != ''
      name: Cache sysroot
      uses: actions/cache@v3
      with:
        key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('jdk/.github/workflows/submit.yml')
          }}
        path: ~/sysroot-${{ matrix.debian-arch }}/
    - continue-on-error: true
      if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'
      name: Install sysroot host dependencies
      run: sudo apt-get install debootstrap qemu-user-static
    - continue-on-error: true
      if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'
      name: Create sysroot
      run: 'sudo qemu-debootstrap --arch=${{ matrix.debian-arch }} --verbose --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev
        --resolve-deps buster ~/sysroot-${{ matrix.debian-arch }} http://httpredir.debian.org/debian/

        '
    - continue-on-error: true
      if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'
      name: Prepare sysroot for caching
      run: 'sudo chroot ~/sysroot-${{ matrix.debian-arch }} symlinks -cr .

        sudo chown ${USER} -R ~/sysroot-${{ matrix.debian-arch }}

        rm -rf ~/sysroot-${{ matrix.debian-arch }}/{dev,proc,run,sys}

        '
    - continue-on-error: true
      if: matrix.debian-arch != ''
      name: Configure cross compiler
      run: 'echo "CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-gcc-9"
        >> $GITHUB_ENV

        echo "CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-g++-9" >>
        $GITHUB_ENV

        '
    - continue-on-error: true
      if: matrix.debian-arch != ''
      name: Configure cross specific flags
      run: 'echo "cross_flags= --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{
        matrix.gnu-flavor}} --with-sysroot=${HOME}/sysroot-${{ matrix.debian-arch
        }}/ --with-cups=${HOME}/sysroot-${{ matrix.debian-arch }}/usr --with-freetype-lib=${HOME}/sysroot-${{
        matrix.debian-arch }}/usr/lib/${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}
        --with-freetype-include=${HOME}/sysroot-${{ matrix.debian-arch }}/usr/include/freetype2
        --with-alsa=${HOME}/sysroot-${{ matrix.debian-arch }}/usr --with-fontconfig=${HOME}/sysroot-${{
        matrix.debian-arch }}/usr " >> $GITHUB_ENV && echo "cross_conf_env= CFLAGS=--sysroot=${HOME}/sysroot-${{
        matrix.debian-arch }} CXXFLAGS=--sysroot=${HOME}/sysroot-${{ matrix.debian-arch
        }} LDFLAGS=--sysroot=${HOME}/sysroot-${{ matrix.debian-arch }} " >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Configure
      run: '${{ env.cross_conf_env }} bash configure --with-conf-name=linux-${{ matrix.gnu-arch
        }}-hotspot ${{ matrix.flags }} ${{ env.cross_flags }} --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA}
        --with-build-number=b00 --with-boot-jdk=${BOOT_JDK} --disable-headful --with-zlib=bundled

        '
      working-directory: jdk
    - continue-on-error: true
      name: Build
      run: make CONF_NAME=linux-${{ matrix.gnu-arch }}-hotspot hotspot
      working-directory: jdk
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - hs x64 build only
        - hs x64 zero build only
        - hs x86 minimal build only
        - hs x86 client build only
        - hs aarch64 build only
        - hs arm build only
        - hs s390x build only
        - hs ppc64le build only
        include:
        - flags: --enable-debug --disable-precompiled-headers
          flavor: hs x64 build only
        - flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero
          flavor: hs x64 zero build only
        - flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=minimal1
            --with-target-bits=32
          flavor: hs x86 minimal build only
          multilib: true
        - flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=client
            --with-target-bits=32
          flavor: hs x86 client build only
          multilib: true
        - debian-arch: arm64
          flags: --enable-debug --disable-precompiled-headers
          flavor: hs aarch64 build only
          gnu-arch: aarch64
        - debian-arch: armhf
          flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero
          flavor: hs arm build only
          gnu-arch: arm
          gnu-flavor: eabihf
        - debian-arch: s390x
          flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero
          flavor: hs s390x build only
          gnu-arch: s390x
        - debian-arch: ppc64el
          flags: --enable-debug --disable-precompiled-headers
          flavor: hs ppc64le build only
          gnu-arch: powerpc64le
  linux_x64_build:
    env:
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x64
      != 'false'
    name: Linux x64
    needs: prerequisites
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
      with:
        path: jdk
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      name: Fix jtreg permissions
      run: chmod -R a+rx ${HOME}/jtreg/
    - continue-on-error: true
      name: Install dependencies
      run: 'sudo apt-get update

        sudo apt-get install openjdk-8-jdk gcc-9 g++-9 libxrandr-dev libxtst-dev libcups2-dev
        libasound2-dev

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave
        /usr/bin/g++ g++ /usr/bin/g++-9

        '
    - continue-on-error: true
      name: Configure
      run: 'bash configure --with-conf-name=linux-x64 ${{ matrix.flags }} --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA}
        --with-build-number=b00 --with-jtreg=${HOME}/jtreg --with-zlib=bundled

        '
      working-directory: jdk
    - continue-on-error: true
      name: Build
      run: make CONF_NAME=linux-x64 LOG_LEVEL=debug images
      working-directory: jdk
    - continue-on-error: true
      name: Pack artifacts
      run: "tar -czf jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact\_\
        }}.tar.gz -C jdk/build/linux-x64/images j2sdk-image\n"
    - continue-on-error: true
      name: Persist test bundles
      uses: actions/upload-artifact@v3
      with:
        name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id
          }}
        path: "jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact\_\
          }}.tar.gz\n"
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - build release
        - build debug
        include:
        - artifact: -debug
          flags: --enable-debug
          flavor: build debug
  linux_x64_test:
    env:
      BOOT_JDK: /usr/lib/jvm/java-8-openjdk-amd64
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    name: Linux x64
    needs:
    - prerequisites
    - linux_x64_build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      id: build_restore
      name: Restore build artifacts
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-linux-x64${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-linux-x64${{ matrix.artifact\_}}"
    - continue-on-error: true
      if: steps.build_restore.outcome == 'failure'
      name: Restore build artifacts (retry)
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-linux-x64${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-linux-x64${{ matrix.artifact\_}}"
    - continue-on-error: true
      name: Install dependencies
      run: 'sudo apt-get update

        sudo apt-get install openjdk-8-jdk

        '
    - continue-on-error: true
      name: Unpack jdk
      run: "mkdir -p \"${HOME}/jdk-linux-x64${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_linux-x64_bin${{ matrix.artifact\_}}\"\ntar -xzf \"${HOME}/jdk-linux-x64${{\
        \ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{\
        \ matrix.artifact\_}}.tar.gz\" -C \"${HOME}/jdk-linux-x64${{ matrix.artifact\_\
        }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact\_\
        }}\"\n"
    - continue-on-error: true
      name: Run tests
      run: "chmod +x \"${HOME}/jtreg/bin/jtreg\" && mkdir test-results && cd test\
        \ && PRODUCT_HOME=\"${HOME}/jdk-linux-x64${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_linux-x64_bin${{ matrix.artifact\_}}/j2sdk-image\" JT_HOME=\"\
        ${HOME}/jtreg\" ALT_OUTPUTDIR=\"${GITHUB_WORKSPACE}/test-results\" JAVA_ARGS=\"\
        -Djdk.test.docker.image.name=ubuntu -Djdk.test.docker.image.version=latest\"\
        \ JTREG_TIMEOUT_FACTOR=\"4\" make \"${{ matrix.suites }}\"\n"
    - continue-on-error: true
      if: always()
      name: Check that all tests executed successfully
      run: "if cat test-results/testoutput/*/exitcode.txt | grep -q -v '^0$' || !\
        \ cat test-results/testoutput/*/Stats.txt | grep -q 'fail=0' ; then\n  cat\
        \ test-results/testoutput/*/JTreport/text/{newfailures,other_errors}.txt ;\n\
        \  exit 1 ;\nfi\n"
    - continue-on-error: true
      if: always()
      name: Create suitable test log artifact name
      run: echo "logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`"
        >> $GITHUB_ENV
    - continue-on-error: true
      if: always()
      name: Package test results
      run: "zip -r9 \"$HOME/linux-x64${{ matrix.artifact\_}}_testresults_${{ env.logsuffix\
        \ }}.zip\" . -x \"*ARCHIVE_BUNDLE.zip\"\n"
      working-directory: test-results
    - continue-on-error: true
      if: always()
      name: Persist test results
      uses: actions/upload-artifact@v3
      with:
        path: "~/linux-x64${{ matrix.artifact\_}}_testresults_${{ env.logsuffix }}.zip"
    strategy:
      fail-fast: false
      matrix:
        include:
        - suites: jdk_tier1
          test: jdk/tier1
        - suites: langtools_tier1
          test: langtools/tier1
        - suites: hotspot_tier1
          test: hotspot/tier1
        test:
        - jdk/tier1
        - langtools/tier1
        - hotspot/tier1
  linux_x86_build:
    env:
      BOOT_JDK: /usr/lib/jvm/java-8-openjdk-amd64
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x86
      != 'false'
    name: Linux x86
    needs: prerequisites
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
      with:
        path: jdk
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      name: Fix jtreg permissions
      run: chmod -R a+rx ${HOME}/jtreg/
    - continue-on-error: true
      name: Install dependencies
      run: 'sudo dpkg --add-architecture i386

        sudo apt-get update

        sudo apt-get install --only-upgrade apt

        sudo apt-get install openjdk-8-jdk gcc-9-multilib g++-9-multilib libfreetype6-dev:i386
        libxrandr-dev:i386 libxtst-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386
        libcups2-dev:i386 libasound2-dev:i386

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave
        /usr/bin/g++ g++ /usr/bin/g++-9

        '
    - continue-on-error: true
      name: Configure
      run: 'bash configure --with-conf-name=linux-x86 --with-target-bits=32 ${{ matrix.flags
        }} --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA} --with-build-number=b00
        --with-boot-jdk=${BOOT_JDK} --with-jtreg=${HOME}/jtreg --with-zlib=bundled

        '
      working-directory: jdk
    - continue-on-error: true
      name: Build
      run: make CONF_NAME=linux-x86 images
      working-directory: jdk
    - continue-on-error: true
      name: Pack artifacts
      run: "tar -czf jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact\_\
        }}.tar.gz -C jdk/build/linux-x86/images j2sdk-image\n"
    - continue-on-error: true
      name: Persist test bundles
      uses: actions/upload-artifact@v3
      with:
        name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id
          }}
        path: "jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact\_\
          }}.tar.gz\n"
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - build release
        - build debug
        include:
        - artifact: -debug
          flags: --enable-debug
          flavor: build debug
  linux_x86_test:
    env:
      BOOT_JDK: /usr/lib/jvm/java-8-openjdk-amd64
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    name: Linux x86
    needs:
    - prerequisites
    - linux_x86_build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      id: build_restore
      name: Restore build artifacts
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-linux-x86${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-linux-x86${{ matrix.artifact\_}}"
    - continue-on-error: true
      if: steps.build_restore.outcome == 'failure'
      name: Restore build artifacts (retry)
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-linux-x86${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-linux-x86${{ matrix.artifact\_}}"
    - continue-on-error: true
      name: Install dependencies
      run: 'sudo apt-get update

        sudo apt-get install openjdk-8-jdk gcc-9-multilib g++-9-multilib

        '
    - continue-on-error: true
      name: Unpack jdk
      run: "mkdir -p \"${HOME}/jdk-linux-x86${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_linux-x86_bin${{ matrix.artifact\_}}\"\ntar -xzf \"${HOME}/jdk-linux-x86${{\
        \ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{\
        \ matrix.artifact\_}}.tar.gz\" -C \"${HOME}/jdk-linux-x86${{ matrix.artifact\_\
        }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact\_\
        }}\"\n"
    - continue-on-error: true
      if: matrix.test == 'hotspot/tier1'
      name: Build multilib docker image
      run: 'printf ''%s\n%s\n'' ''FROM ubuntu:latest'' ''RUN dpkg --add-architecture
        i386 && apt-get update && apt-get -y install libc6:i386'' | docker build -t
        ''ubuntu-multilib:latest'' -

        '
    - continue-on-error: true
      name: Run tests
      run: "chmod +x \"${HOME}/jtreg/bin/jtreg\" && mkdir test-results && cd test\
        \ && PRODUCT_HOME=\"${HOME}/jdk-linux-x86${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_linux-x86_bin${{ matrix.artifact\_}}/j2sdk-image\" JT_HOME=\"\
        ${HOME}/jtreg\" ALT_OUTPUTDIR=\"${GITHUB_WORKSPACE}/test-results\" JAVA_ARGS=\"\
        -Djdk.test.docker.image.name=ubuntu-multilib -Djdk.test.docker.image.version=latest\"\
        \ JTREG_TIMEOUT_FACTOR=\"4\" make \"${{ matrix.suites }}\"\n"
    - continue-on-error: true
      if: always()
      name: Check that all tests executed successfully
      run: "if cat test-results/testoutput/*/exitcode.txt | grep -q -v '^0$' || !\
        \ cat test-results/testoutput/*/Stats.txt | grep -q 'fail=0' ; then\n  cat\
        \ test-results/testoutput/*/JTreport/text/{newfailures,other_errors}.txt ;\n\
        \  exit 1 ;\nfi\n"
    - continue-on-error: true
      if: always()
      name: Create suitable test log artifact name
      run: echo "logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`"
        >> $GITHUB_ENV
    - continue-on-error: true
      if: always()
      name: Package test results
      run: "zip -r9 \"$HOME/linux-x86${{ matrix.artifact\_}}_testresults_${{ env.logsuffix\
        \ }}.zip\" . -x \"*ARCHIVE_BUNDLE.zip\"\n"
      working-directory: test-results
    - continue-on-error: true
      if: always()
      name: Persist test results
      uses: actions/upload-artifact@v3
      with:
        path: "~/linux-x86${{ matrix.artifact\_}}_testresults_${{ env.logsuffix }}.zip"
    strategy:
      fail-fast: false
      matrix:
        include:
        - suites: jdk_tier1
          test: jdk/tier1
        - suites: langtools_tier1
          test: langtools/tier1
        - suites: hotspot_tier1
          test: hotspot/tier1
        test:
        - jdk/tier1
        - langtools/tier1
        - hotspot/tier1
  macos_x64_build:
    env:
      BOOT_JDK_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME
        }}
      BOOT_JDK_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256
        }}
      BOOT_JDK_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL
        }}
      BOOT_JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION
        }}
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_macos_x64
      != 'false'
    name: macOS x64
    needs: prerequisites
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
      with:
        path: jdk
    - continue-on-error: true
      id: bootjdk
      name: Restore boot JDK from cache
      uses: actions/cache@v3
      with:
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256
          }}-v1
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
    - continue-on-error: true
      if: steps.bootjdk.outputs.cache-hit != 'true'
      name: Download boot JDK
      run: 'mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true

        wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"

        echo "${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | shasum -a
        256 -c >/dev/null -

        tar -xzf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"

        mv "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"*/* "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"

        '
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      name: Fix jtreg permissions
      run: chmod -R a+rx ${HOME}/jtreg/
    - continue-on-error: true
      name: Install dependencies
      run: brew install make
    - continue-on-error: true
      name: Select Xcode version
      run: sudo xcode-select --switch /Applications/Xcode_11.7.app/Contents/Developer
    - continue-on-error: true
      name: Configure
      run: 'bash configure --with-conf-name=macos-x64 ${{ matrix.flags }} --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA}
        --with-build-number=b00 --with-boot-jdk=${HOME}/bootjdk/${BOOT_JDK_VERSION}/Contents/Home
        --with-jtreg=${HOME}/jtreg --with-zlib=system

        '
      working-directory: jdk
    - continue-on-error: true
      name: Build
      run: make CONF_NAME=macos-x64 images
      working-directory: jdk
    - continue-on-error: true
      name: Pack artifacts
      run: 'tar -czf jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact
        }}.tar.gz -C jdk/build/macos-x64/images j2sdk-image

        '
    - continue-on-error: true
      name: Persist test bundles
      uses: actions/upload-artifact@v3
      with:
        name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id
          }}
        path: 'jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact
          }}.tar.gz

          '
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - build release
        - build debug
        include:
        - flavor: build release
        - artifact: -debug
          flags: --enable-debug
          flavor: build debug
  macos_x64_test:
    env:
      BOOT_JDK_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME
        }}
      BOOT_JDK_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256
        }}
      BOOT_JDK_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL
        }}
      BOOT_JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION
        }}
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    name: macOS x64
    needs:
    - prerequisites
    - macos_x64_build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
    - continue-on-error: true
      id: bootjdk
      name: Restore boot JDK from cache
      uses: actions/cache@v3
      with:
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256
          }}-v1
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
    - continue-on-error: true
      if: steps.bootjdk.outputs.cache-hit != 'true'
      name: Download boot JDK
      run: 'mkdir -p ${HOME}/bootjdk/${BOOT_JDK_VERSION} || true

        wget -O "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" "${BOOT_JDK_URL}"

        echo "${BOOT_JDK_SHA256}  ${HOME}/bootjdk/${BOOT_JDK_FILENAME}" | shasum -a
        256 -c >/dev/null -

        tar -xzf "${HOME}/bootjdk/${BOOT_JDK_FILENAME}" -C "${HOME}/bootjdk/${BOOT_JDK_VERSION}"

        mv "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"*/* "${HOME}/bootjdk/${BOOT_JDK_VERSION}/"

        '
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      id: build_restore
      name: Restore build artifacts
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-macos-x64${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-macos-x64${{ matrix.artifact\_}}"
    - continue-on-error: true
      if: steps.build_restore.outcome == 'failure'
      name: Restore build artifacts (retry)
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-macos-x64${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-macos-x64${{ matrix.artifact\_}}"
    - continue-on-error: true
      name: Unpack jdk
      run: "mkdir -p \"${HOME}/jdk-macos-x64${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_osx-x64_bin${{ matrix.artifact\_}}\"\ntar -xzf \"${HOME}/jdk-macos-x64${{\
        \ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{\
        \ matrix.artifact\_}}.tar.gz\" -C \"${HOME}/jdk-macos-x64${{ matrix.artifact\_\
        }}/jdk-${{ env.JDK_VERSION }}-internal+0_osx-x64_bin${{ matrix.artifact\_\
        }}\"\n"
    - continue-on-error: true
      name: Install dependencies
      run: brew install make
    - continue-on-error: true
      name: Select Xcode version
      run: sudo xcode-select --switch /Applications/Xcode_11.7.app/Contents/Developer
    - continue-on-error: true
      name: Run tests
      run: "chmod +x \"${HOME}/jtreg/bin/jtreg\" && mkdir test-results && cd test\
        \ && PRODUCT_HOME=\"${HOME}/jdk-macos-x64${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_osx-x64_bin${{ matrix.artifact\_}}/j2sdk-image\" JT_HOME=\"\
        ${HOME}/jtreg\" ALT_OUTPUTDIR=\"${GITHUB_WORKSPACE}/test-results\" JTREG_TIMEOUT_FACTOR=\"\
        4\" gmake \"${{ matrix.suites }}\"\n"
    - continue-on-error: true
      if: always()
      name: Check that all tests executed successfully
      run: "if cat test-results/testoutput/*/exitcode.txt | grep -q -v '^0$' || !\
        \ cat test-results/testoutput/*/Stats.txt | grep -q 'fail=0' ; then\n  cat\
        \ test-results/testoutput/*/JTreport/text/{newfailures,other_errors}.txt ;\n\
        \  exit 1 ;\nfi\n"
    - continue-on-error: true
      if: always()
      name: Create suitable test log artifact name
      run: echo "logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`"
        >> $GITHUB_ENV
    - continue-on-error: true
      if: always()
      name: Package test results
      run: "zip -r9 \"$HOME/macos-x64${{ matrix.artifact\_}}_testresults_${{ env.logsuffix\
        \ }}.zip\" . -x \"*ARCHIVE_BUNDLE.zip\"\n"
      working-directory: test-results
    - continue-on-error: true
      if: always()
      name: Persist test results
      uses: actions/upload-artifact@v3
      with:
        path: "~/macos-x64${{ matrix.artifact\_}}_testresults_${{ env.logsuffix }}.zip"
    strategy:
      fail-fast: false
      matrix:
        include:
        - suites: jdk_tier1
          test: jdk/tier1
        - suites: langtools_tier1
          test: langtools/tier1
        - suites: hotspot_tier1
          test: hotspot/tier1
        test:
        - jdk/tier1
        - langtools/tier1
        - hotspot/tier1
  prerequisites:
    name: Prerequisites
    outputs:
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
      dependencies: ${{ steps.check_deps.outputs.dependencies }}
      platform_linux_additional: ${{ steps.check_platforms.outputs.platform_linux_additional
        }}
      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}
      platform_linux_x86: ${{ steps.check_platforms.outputs.platform_linux_x86 }}
      platform_macos_x64: ${{ steps.check_platforms.outputs.platform_macos_x64 }}
      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64
        }}
      platform_windows_x86: ${{ steps.check_platforms.outputs.platform_windows_x86
        }}
      should_run: ${{ steps.check_submit.outputs.should_run }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: check_submit
      name: Check if submit tests should actually run depending on secrets and manual
        triggering
      run: echo "should_run=${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER
        || startsWith(github.ref, 'refs/heads/submit/')) }}" >> $GITHUB_OUTPUT
    - continue-on-error: true
      id: check_platforms
      if: steps.check_submit.outputs.should_run != 'false'
      name: Check which platforms should be included
      run: 'echo "platform_linux_additional=${{ contains(github.event.inputs.platforms,
        ''linux additional (hotspot only)'') || (github.event.inputs.platforms ==
        '''' && (secrets.JDK_SUBMIT_PLATFORMS == '''' || contains(secrets.JDK_SUBMIT_PLATFORMS,
        ''linux additional (hotspot only)''))) }}" >> $GITHUB_OUTPUT

        echo "platform_linux_x64=${{ contains(github.event.inputs.platforms, ''linux
        x64'') || (github.event.inputs.platforms == '''' && (secrets.JDK_SUBMIT_PLATFORMS
        == '''' || contains(secrets.JDK_SUBMIT_PLATFORMS, ''linux x64''))) }}" >>
        $GITHUB_OUTPUT

        echo "platform_linux_x86=${{ contains(github.event.inputs.platforms, ''linux
        x86'') || (github.event.inputs.platforms == '''' && (secrets.JDK_SUBMIT_PLATFORMS
        == '''' || contains(secrets.JDK_SUBMIT_PLATFORMS, ''linux x86''))) }}" >>
        $GITHUB_OUTPUT

        echo "platform_windows_x64=${{ contains(github.event.inputs.platforms, ''windows
        x64'') || (github.event.inputs.platforms == '''' && (secrets.JDK_SUBMIT_PLATFORMS
        == '''' || contains(secrets.JDK_SUBMIT_PLATFORMS, ''windows x64''))) }}" >>
        $GITHUB_OUTPUT

        echo "platform_windows_x86=${{ contains(github.event.inputs.platforms, ''windows
        x86'') || (github.event.inputs.platforms == '''' && (secrets.JDK_SUBMIT_PLATFORMS
        == '''' || contains(secrets.JDK_SUBMIT_PLATFORMS, ''windows x86''))) }}" >>
        $GITHUB_OUTPUT

        echo "platform_macos_x64=${{ contains(github.event.inputs.platforms, ''macos
        x64'') || (github.event.inputs.platforms == '''' && (secrets.JDK_SUBMIT_PLATFORMS
        == '''' || contains(secrets.JDK_SUBMIT_PLATFORMS, ''macos x64''))) }}" >>
        $GITHUB_OUTPUT

        '
    - continue-on-error: true
      id: check_bundle_id
      if: steps.check_submit.outputs.should_run != 'false'
      name: Determine unique bundle identifier
      run: echo "bundle_id=${GITHUB_ACTOR}_${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false'
      name: Checkout the source
      uses: actions/checkout@v3
      with:
        path: jdk
    - continue-on-error: true
      id: check_deps
      if: steps.check_submit.outputs.should_run != 'false'
      name: Determine versions and locations to be used for dependencies
      run: 'echo dependencies=`cat common/autoconf/version-numbers make/conf/test-dependencies
        | sed -e ''1i {'' -e ''s/#.*//g'' -e ''s/"//g'' -e ''s/\(.*\)=\(.*\)/"\1":
        "\2",/g'' -e ''$s/,\s\{0,\}$/\}/''` >> $GITHUB_OUTPUT'
      working-directory: jdk
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false'
      name: Print extracted dependencies to the log
      run: echo '${{ steps.check_deps.outputs.dependencies }}'
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false'
      name: Determine the jtreg ref to checkout
      run: echo JTREG_REF=jtreg${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION
        }}-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false'
      name: Determine the jtreg version to build
      run: echo "BUILD_VERSION=${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION
        }}" >> $GITHUB_ENV
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false'
      name: Determine the jtreg build number to build
      run: echo "BUILD_NUMBER=${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD
        }}" >> $GITHUB_ENV
    - continue-on-error: true
      id: jtreg
      if: steps.check_submit.outputs.should_run != 'false'
      name: Check if a jtreg image is present in the cache
      uses: actions/cache@v3
      with:
        key: jtreg-${{ env.JTREG_REF }}-v1
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit
        != 'true'
      name: Checkout the jtreg source
      uses: actions/checkout@v3
      with:
        path: jtreg
        ref: ${{ env.JTREG_REF }}
        repository: openjdk/jtreg
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit
        != 'true'
      name: Build jtreg
      run: bash make/build-all.sh ${JAVA_HOME_8_X64}
      working-directory: jtreg
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit
        != 'true'
      name: Move jtreg image to destination folder
      run: mv build/images/jtreg ~/
      working-directory: jtreg
    - continue-on-error: true
      if: steps.check_submit.outputs.should_run != 'false'
      name: Store jtreg for use by later steps
      uses: actions/upload-artifact@v3
      with:
        name: transient_jtreg_${{ steps.check_bundle_id.outputs.bundle_id }}
        path: ~/jtreg/
  windows_x64_build:
    env:
      BOOT_JDK_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME
        }}
      BOOT_JDK_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256
        }}
      BOOT_JDK_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL
        }}
      BOOT_JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION
        }}
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
      VS2017_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_FILENAME
        }}
      VS2017_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_SHA256
        }}
      VS2017_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_URL
        }}
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x64
      != 'false'
    name: Windows x64
    needs: prerequisites
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: cygwin-installer
      name: Restore cygwin installer from cache
      uses: actions/cache@v3
      with:
        key: cygwin-installer
        path: ~/cygwin/setup-x86_64.exe
    - continue-on-error: true
      if: steps.cygwin-installer.outputs.cache-hit != 'true'
      name: Download cygwin installer
      run: 'New-Item -Force -ItemType directory -Path "$HOME\cygwin"

        & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"

        '
    - continue-on-error: true
      id: cygwin
      name: Restore cygwin packages from cache
      uses: actions/cache@v3
      with:
        key: cygwin-packages-${{ runner.os }}-v1
        path: ~/cygwin/packages
    - continue-on-error: true
      name: Install cygwin
      run: 'Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList
        "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64
        --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin
        --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

        '
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
      with:
        path: jdk
    - continue-on-error: true
      name: Checkout the FreeType source
      uses: actions/checkout@v3
      with:
        path: freetype
        ref: VER-2-8-1
        repository: freetype/freetype
    - continue-on-error: true
      id: bootjdk
      name: Restore boot JDK from cache
      uses: actions/cache@v3
      with:
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256
          }}-v1
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
    - continue-on-error: true
      if: steps.bootjdk.outputs.cache-hit != 'true'
      name: Download boot JDK
      run: 'mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash.Hash -eq $env:BOOT_JDK_SHA256

        & unzip "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -d "$HOME/bootjdk/$env:BOOT_JDK_VERSION"

        Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination
        "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        '
    - continue-on-error: true
      id: vs2017
      name: Restore Visual Studio 2017 from cache
      uses: actions/cache@v3
      with:
        key: vs2017
        path: ~/${{ env.VS2017_FILENAME }}
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      name: Uninstall WinSDKs
      run: 'Start-Process -FilePath ''C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe''
        -Wait -NoNewWindow -ArgumentList ''modify --installPath "C:\Program Files
        (x86)\Microsoft Visual Studio\2019\Enterprise" --remove Microsoft.VisualStudio.Component.Windows10SDK.18362
        --remove Microsoft.VisualStudio.Component.Windows10SDK.19041 --remove Microsoft.VisualStudio.Component.Windows10SDK.20348
        --remove Microsoft.VisualStudio.Component.Windows10SDK.22000 --quiet''

        '
    - continue-on-error: true
      if: steps.vs2017.outputs.cache-hit != 'true'
      name: Download Visual Studio 2017
      run: 'curl -L "$env:VS2017_URL" -o "$HOME/$env:VS2017_FILENAME"

        '
    - continue-on-error: true
      name: Install Visual Studio 2017
      run: 'Start-Process -FilePath "$HOME\$env:VS2017_FILENAME" -Wait -NoNewWindow
        -ArgumentList ''install --productId Microsoft.VisualStudio.Product.Community
        --channelId VisualStudio.15.Release --add Microsoft.VisualStudio.Workload.NativeDesktop
        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.17763
        --quiet --wait''

        '
    - continue-on-error: true
      name: Fix OpenJDK permissions
      run: bash -c "chmod -R 0777 jdk"
    - continue-on-error: true
      name: Copy FreeType project file
      run: 'Remove-Item "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj"
        ; Copy-Item -Path "$env:GITHUB_WORKSPACE\jdk\.github\workflows\freetype.vcxproj"
        -Destination "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj"
        ;

        '
    - continue-on-error: true
      name: Configure
      run: '$env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path"
        ; $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin"
        -join ";" ; $env:BOOT_JDK = cygpath "$HOME/bootjdk/$env:BOOT_JDK_VERSION"
        ; $env:FREETYPE_HOME = "$env:GITHUB_WORKSPACE\freetype" ; $env:JT_HOME = cygpath
        "$HOME/jtreg" ; & bash configure --with-toolchain-version=2017 --with-conf-name=windows-x64
        ${{ matrix.flags }} --with-user-release-suffix="$env:GITHUB_ACTOR-$env:GITHUB_SHA"
        --with-build-number=b00 --with-boot-jdk="$env:BOOT_JDK" --with-freetype-src="$env:FREETYPE_HOME"
        --with-jtreg="$env:JT_HOME" ; bash -c "cat $(find -name config.log)"

        '
      working-directory: jdk
    - continue-on-error: true
      name: Build
      run: '$env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path"
        ;

        $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join
        ";" ;

        & make CONF_NAME=windows-x64 FORCE_MSC_VER=1912 FORCE_LD_VER=1412 images

        '
      working-directory: jdk
    - continue-on-error: true
      name: Pack artifacts
      run: 'dir ; $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ; zip -r9 "${{
        github.workspace }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{
        matrix.artifact }}.zip" j2sdk-image

        '
      working-directory: jdk/build/windows-x64/images
    - continue-on-error: true
      name: Persist test bundles
      uses: actions/upload-artifact@v3
      with:
        name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id
          }}
        path: 'jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact
          }}.zip

          '
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - build release
        - build debug
        include:
        - artifact: -debug
          flags: --enable-debug
          flavor: build debug
  windows_x64_test:
    env:
      BOOT_JDK_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME
        }}
      BOOT_JDK_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256
        }}
      BOOT_JDK_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL
        }}
      BOOT_JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION
        }}
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    name: Windows x64
    needs:
    - prerequisites
    - windows_x64_build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
    - continue-on-error: true
      id: bootjdk
      name: Restore boot JDK from cache
      uses: actions/cache@v3
      with:
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256
          }}-v1
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
    - continue-on-error: true
      if: steps.bootjdk.outputs.cache-hit != 'true'
      name: Download boot JDK
      run: 'mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash.Hash -eq $env:BOOT_JDK_SHA256

        & unzip "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -d "$HOME/bootjdk/$env:BOOT_JDK_VERSION"

        Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination
        "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        '
    - continue-on-error: true
      id: cygwin-installer
      name: Restore cygwin installer from cache
      uses: actions/cache@v3
      with:
        key: cygwin-installer
        path: ~/cygwin/setup-x86_64.exe
    - continue-on-error: true
      if: steps.cygwin-installer.outputs.cache-hit != 'true'
      name: Download cygwin installer
      run: 'New-Item -Force -ItemType directory -Path "$HOME\cygwin"

        & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"

        '
    - continue-on-error: true
      id: cygwin
      name: Restore cygwin packages from cache
      uses: actions/cache@v3
      with:
        key: cygwin-packages-${{ runner.os }}-v1
        path: ~/cygwin/packages
    - continue-on-error: true
      name: Install cygwin
      run: 'Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList
        "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64
        --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin
        --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

        '
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      id: build_restore
      name: Restore build artifacts
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-windows-x64${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-windows-x64${{ matrix.artifact\_}}"
    - continue-on-error: true
      if: steps.build_restore.outcome == 'failure'
      name: Restore build artifacts (retry)
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-windows-x64${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-windows-x64${{ matrix.artifact\_}}"
    - continue-on-error: true
      name: Unpack jdk
      run: "mkdir -p \"${HOME}/jdk-windows-x64${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_windows-x64_bin${{ matrix.artifact\_}}\"\nunzip \"${HOME}/jdk-windows-x64${{\
        \ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{\
        \ matrix.artifact\_}}.zip\" -d \"${HOME}/jdk-windows-x64${{ matrix.artifact\_\
        }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\_\
        }}\"\n"
    - continue-on-error: true
      name: Create results dir
      run: 'mkdir test-results

        '
    - continue-on-error: true
      name: Run tests
      run: "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\"\
        \ ; $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\"\
        \ -join \";\" ; $env:PRODUCT_HOME = cygpath \"$HOME/jdk-windows-x64${{ matrix.artifact\_\
        }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x64_bin${{ matrix.artifact\_\
        }}/j2sdk-image\" ; $env:JT_HOME = cygpath \"$HOME/jtreg\" ; $env:ALT_OUTPUTDIR\
        \ = cygpath \"$env:GITHUB_WORKSPACE/test-results\" ; $env:JAVA_ARGS = \"-XX:-CreateMinidumpOnCrash\
        \ -Djdk.test.container.command=skipcontianer\" ; $env:JTREG_TIMEOUT_FACTOR\
        \ = \"4\" ; & make \"${{ matrix.suites }}\"\n"
      working-directory: test
    - continue-on-error: true
      if: always()
      name: Check that all tests executed successfully
      run: "if ((Get-ChildItem -Path test-results\\testoutput\\*\\exitcode.txt -Recurse\
        \ | Select-String -Pattern '^0$' -NotMatch ).Count -gt 0) {\n  Get-Content\
        \ -Path test-results\\testoutput\\*\\JTreport\\text\\newfailures.txt ;\n \
        \ Get-Content -Path test-results\\testoutput\\*\\JTreport\\text\\other_errors.txt\
        \ ;\n  exit 1\n}\n"
    - continue-on-error: true
      if: always()
      name: Create suitable test log artifact name
      run: echo ("logsuffix=" + ("${{ matrix.test }}" -replace "/", "_" -replace "
        ", "_")) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
    - continue-on-error: true
      if: always()
      name: Package test results
      run: "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ; zip -r9 \"$HOME/windows-x64${{\
        \ matrix.artifact\_}}_testresults_${{ env.logsuffix }}.zip\" . -x \"*ARCHIVE_BUNDLE.zip\"\
        \n"
      working-directory: test-results
    - continue-on-error: true
      if: always()
      name: Persist test results
      uses: actions/upload-artifact@v3
      with:
        path: "~/windows-x64${{ matrix.artifact\_}}_testresults_${{ env.logsuffix\
          \ }}.zip"
    strategy:
      fail-fast: false
      matrix:
        include:
        - suites: jdk_tier1
          test: jdk/tier1
        - suites: langtools_tier1
          test: langtools/tier1
        - suites: hotspot_tier1
          test: hotspot/tier1
        test:
        - jdk/tier1
        - langtools/tier1
        - hotspot/tier1
  windows_x86_build:
    env:
      BOOT_JDK_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_FILENAME
        }}
      BOOT_JDK_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_SHA256
        }}
      BOOT_JDK_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_URL
        }}
      BOOT_JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION
        }}
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
      VS2010_DIR: ${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_DIR
        }}
      VS2010_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_FILENAME
        }}
      VS2010_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_SHA256
        }}
      VS2010_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).VS2010_URL
        }}
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x86
      != 'false'
    name: Windows x86
    needs: prerequisites
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: cygwin-installer
      name: Restore cygwin installer from cache
      uses: actions/cache@v3
      with:
        key: cygwin-installer
        path: ~/cygwin/setup-x86_64.exe
    - continue-on-error: true
      if: steps.cygwin-installer.outputs.cache-hit != 'true'
      name: Download cygwin installer
      run: 'New-Item -Force -ItemType directory -Path "$HOME\cygwin"

        & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"

        '
    - continue-on-error: true
      id: cygwin
      name: Restore cygwin packages from cache
      uses: actions/cache@v3
      with:
        key: cygwin-packages-${{ runner.os }}-v1
        path: ~/cygwin/packages
    - continue-on-error: true
      name: Install cygwin
      run: 'Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList
        "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64
        --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin
        --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

        '
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
      with:
        path: jdk
    - continue-on-error: true
      name: Checkout the FreeType source
      uses: actions/checkout@v3
      with:
        path: freetype
        ref: VER-2-8-1
        repository: freetype/freetype
    - continue-on-error: true
      id: bootjdk
      name: Restore boot JDK from cache
      uses: actions/cache@v3
      with:
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256
          }}-v1
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
    - continue-on-error: true
      if: steps.bootjdk.outputs.cache-hit != 'true'
      name: Download boot JDK
      run: 'mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash.Hash -eq $env:BOOT_JDK_SHA256

        & unzip "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -d "$HOME/bootjdk/$env:BOOT_JDK_VERSION"

        Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination
        "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        '
    - continue-on-error: true
      id: vs2010
      name: Restore Visual Studio 2010 from cache
      uses: actions/cache@v3
      with:
        key: vs2010
        path: ~/${{ env.VS2010_DIR }}
    - continue-on-error: true
      if: steps.vs2010.outputs.cache-hit != 'true'
      name: Download and unpack Visual Studio 2010
      run: 'mkdir "$HOME\$env:VS2010_DIR"

        & curl -L "$env:VS2010_URL" -o "$HOME/$env:VS2010_FILENAME"

        $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/$env:VS2010_FILENAME"

        $FileHash.Hash -eq $env:VS2010_SHA256

        & 7z x -o"$HOME/$env:VS2010_DIR" "$HOME/$env:VS2010_FILENAME"

        & dir "$HOME/$env:VS2010_DIR"

        '
    - continue-on-error: true
      name: Install VS2010Express
      run: 'Start-Process -FilePath "$HOME\$env:VS2010_DIR\VCExpress\setup.exe" -ArgumentList
        "/q /norestart" -Wait -NoNewWindow

        '
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      name: Fix OpenJDK permissions
      run: bash -c "chmod -R 0777 jdk"
    - continue-on-error: true
      name: Copy FreeType project file
      run: 'Remove-Item "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj"
        ; Copy-Item -Path "$env:GITHUB_WORKSPACE\jdk\.github\workflows\freetype.vcxproj"
        -Destination "$env:GITHUB_WORKSPACE\freetype\builds\windows\vc2010\freetype.vcxproj"
        ;

        '
    - continue-on-error: true
      name: Configure
      run: '$env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path"
        ; $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin"
        -join ";" ; $env:BOOT_JDK = cygpath "$HOME/bootjdk/$env:BOOT_JDK_VERSION"
        ; $env:FREETYPE_HOME = "$env:GITHUB_WORKSPACE\freetype" ; $env:JT_HOME = cygpath
        "$HOME/jtreg" ; & bash configure --with-conf-name=windows-x86 --with-toolchain-version=2010
        --with-msvcr-dll=''C:\Windows\SysWOW64\msvcr100.dll'' --with-target-bits=32
        ${{ matrix.flags }} --with-user-release-suffix="$env:GITHUB_ACTOR-$env:GITHUB_SHA"
        --with-build-number=b00 --with-boot-jdk="$env:BOOT_JDK" --with-freetype-src="$env:FREETYPE_HOME"
        --with-jtreg="$env:JT_HOME" ; bash -c "cat $(find -name config.log)"

        '
      working-directory: jdk
    - continue-on-error: true
      name: Build
      run: '$env:Path = "$HOME\cygwin\cygwin64\bin;$HOME\cygwin\cygwin64\bin;$env:Path"
        ;

        $env:Path = $env:Path -split ";" -match "C:\\Windows|PowerShell|cygwin" -join
        ";" ;

        & make CONF_NAME=windows-x86 images

        '
      working-directory: jdk
    - continue-on-error: true
      name: Pack artifacts
      run: 'dir ; $env:Path = "$HOME\cygwin\cygwin64\bin;$env:Path" ; zip -r9 "${{
        github.workspace }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin${{
        matrix.artifact }}.zip" j2sdk-image

        '
      working-directory: jdk/build/windows-x86/images
    - continue-on-error: true
      name: Persist test bundles
      uses: actions/upload-artifact@v3
      with:
        name: transient_jdk-windows-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id
          }}
        path: 'jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin${{ matrix.artifact
          }}.zip

          '
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - build release
        - build debug
        include:
        - artifact: -debug
          flags: --enable-debug
          flavor: build debug
  windows_x86_test:
    env:
      BOOT_JDK_FILENAME: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_FILENAME
        }}
      BOOT_JDK_SHA256: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_SHA256
        }}
      BOOT_JDK_URL: ${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X86_BOOT_JDK_URL
        }}
      BOOT_JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION
        }}
      JDK_VERSION: ${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION
        }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION
        }}
    name: Windows x86
    needs:
    - prerequisites
    - windows_x86_build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the source
      uses: actions/checkout@v3
    - continue-on-error: true
      id: bootjdk
      name: Restore boot JDK from cache
      uses: actions/cache@v3
      with:
        key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256
          }}-v1
        path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
    - continue-on-error: true
      if: steps.bootjdk.outputs.cache-hit != 'true'
      name: Download boot JDK
      run: 'mkdir -p "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        & curl -L "$env:BOOT_JDK_URL" -o "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash = Get-FileHash -Algorithm SHA256 "$HOME/bootjdk/$env:BOOT_JDK_FILENAME"

        $FileHash.Hash -eq $env:BOOT_JDK_SHA256

        & unzip "$HOME/bootjdk/$env:BOOT_JDK_FILENAME" -d "$HOME/bootjdk/$env:BOOT_JDK_VERSION"

        Get-ChildItem "$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination
        "$HOME\bootjdk\$env:BOOT_JDK_VERSION"

        '
    - continue-on-error: true
      id: cygwin-installer
      name: Restore cygwin installer from cache
      uses: actions/cache@v3
      with:
        key: cygwin-installer
        path: ~/cygwin/setup-x86_64.exe
    - continue-on-error: true
      if: steps.cygwin-installer.outputs.cache-hit != 'true'
      name: Download cygwin installer
      run: 'New-Item -Force -ItemType directory -Path "$HOME\cygwin"

        & curl -L "https://www.cygwin.com/setup-x86_64.exe" -o "$HOME/cygwin/setup-x86_64.exe"

        '
    - continue-on-error: true
      id: cygwin
      name: Restore cygwin packages from cache
      uses: actions/cache@v3
      with:
        key: cygwin-packages-${{ runner.os }}-v1
        path: ~/cygwin/packages
    - continue-on-error: true
      name: Install cygwin
      run: 'Start-Process -FilePath "$HOME\cygwin\setup-x86_64.exe" -ArgumentList
        "--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64
        --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin
        --no-desktop --no-shortcuts --no-startmenu --no-admin" -Wait -NoNewWindow

        '
    - continue-on-error: true
      id: jtreg_restore
      name: Restore jtreg artifact
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      if: steps.jtreg_restore.outcome == 'failure'
      name: Restore jtreg artifact (retry)
      uses: actions/download-artifact@v3
      with:
        name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
        path: ~/jtreg/
    - continue-on-error: true
      id: build_restore
      name: Restore build artifacts
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-windows-x86${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-windows-x86${{ matrix.artifact\_}}"
    - continue-on-error: true
      if: steps.build_restore.outcome == 'failure'
      name: Restore build artifacts (retry)
      uses: actions/download-artifact@v3
      with:
        name: "transient_jdk-windows-x86${{ matrix.artifact\_}}_${{ needs.prerequisites.outputs.bundle_id\
          \ }}"
        path: "~/jdk-windows-x86${{ matrix.artifact\_}}"
    - continue-on-error: true
      name: Unpack jdk
      run: "mkdir -p \"${HOME}/jdk-windows-x86${{ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION\
        \ }}-internal+0_windows-x86_bin${{ matrix.artifact\_}}\"\nunzip \"${HOME}/jdk-windows-x86${{\
        \ matrix.artifact\_}}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin${{\
        \ matrix.artifact\_}}.zip\" -d \"${HOME}/jdk-windows-x86${{ matrix.artifact\_\
        }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin${{ matrix.artifact\_\
        }}\"\n"
    - continue-on-error: true
      name: Create results dir
      run: 'mkdir test-results

        '
    - continue-on-error: true
      name: Run tests
      run: "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\"\
        \ ; $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\"\
        \ -join \";\" ; $env:PRODUCT_HOME = cygpath \"$HOME/jdk-windows-x86${{ matrix.artifact\_\
        }}/jdk-${{ env.JDK_VERSION }}-internal+0_windows-x86_bin${{ matrix.artifact\_\
        }}/j2sdk-image\" ; $env:JT_HOME = cygpath \"$HOME/jtreg\" ; $env:ALT_OUTPUTDIR\
        \ = cygpath \"$env:GITHUB_WORKSPACE/test-results\" ; $env:JAVA_ARGS = \"-XX:-CreateMinidumpOnCrash\
        \ -Djdk.test.container.command=skipcontianer\" ; $env:JTREG_TIMEOUT_FACTOR\
        \ = \"4\" ; & make \"${{ matrix.suites }}\"\n"
      working-directory: test
    - continue-on-error: true
      if: always()
      name: Check that all tests executed successfully
      run: "if ((Get-ChildItem -Path test-results\\testoutput\\*\\exitcode.txt -Recurse\
        \ | Select-String -Pattern '^0$' -NotMatch ).Count -gt 0) {\n  Get-Content\
        \ -Path test-results\\testoutput\\*\\JTreport\\text\\newfailures.txt ;\n \
        \ Get-Content -Path test-results\\testoutput\\*\\JTreport\\text\\other_errors.txt\
        \ ;\n  exit 1\n}\n"
    - continue-on-error: true
      if: always()
      name: Create suitable test log artifact name
      run: echo ("logsuffix=" + ("${{ matrix.test }}" -replace "/", "_" -replace "
        ", "_")) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
    - continue-on-error: true
      if: always()
      name: Package test results
      run: "$env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ; zip -r9 \"$HOME/windows-x86${{\
        \ matrix.artifact\_}}_testresults_${{ env.logsuffix }}.zip\" . -x \"*ARCHIVE_BUNDLE.zip\"\
        \n"
      working-directory: test-results
    - continue-on-error: true
      if: always()
      name: Persist test results
      uses: actions/upload-artifact@v3
      with:
        path: "~/windows-x86${{ matrix.artifact\_}}_testresults_${{ env.logsuffix\
          \ }}.zip"
    strategy:
      fail-fast: false
      matrix:
        include:
        - suites: jdk_tier1
          test: jdk/tier1
        - suites: langtools_tier1
          test: langtools/tier1
        - suites: hotspot_tier1
          test: hotspot/tier1
        test:
        - jdk/tier1
        - langtools/tier1
        - hotspot/tier1
name: Pre-submit tests
on:
  repository_dispatch:
    types: trigger-ga___submit.yml
